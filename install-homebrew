#!/bin/bash

set -e -f -u -o pipefail

usage() {
  printf "%s: --ariane|--imac|--laptop [--clean_install]\\n" "$0"
}

curl_pipe_shell() {
  local url="$1"
  /bin/bash -c "$(curl -fsSL "${url}")"
}

cask_install() {
  local app_dir="$1" app_name="$2"
  if [[ ! -d "${app_dir}" ]]; then
    brew install --cask "${app_name}"
  fi
}

php_config_dirs() {
  local php_config_base_dir="${homebrew_base}/etc/php/"
  set +f
  for php_config_dir in "${php_config_base_dir}"/*; do
    echo "${php_config_dir}";
  done
  set -f
}

main() {
  local url_base="https://raw.githubusercontent.com/Homebrew/install/HEAD"
  local install_url="${url_base}/install.sh"
  local uninstall_url="${url_base}/uninstall.sh"
  readonly url_base install_url uninstall_url

  local ariane=0 clean_install=0 imac=0 laptop=0
  while [[ "$#" -gt 0 ]]; do
    case "${1}" in
      --ariane)
        ariane=1
        shift
        ;;
      --clean_install)
        clean_install=1
        shift
        ;;
      --imac)
        imac=1
        shift
        ;;
      --laptop)
        laptop=1
        shift
        ;;
      *)
        usage >&2
        return 1
        ;;
    esac
  done
  readonly clean_install ariane imac laptop

  local sum=$((ariane + imac + laptop))
  if [[ "${sum}" != 1 ]]; then
    usage >&2
    return 1
  fi

  if [[ -x /usr/sbin/DevToolsSecurity ]]; then
    # Enable developer mode to avoid repeated password prompts.
    printf "Enabling developer mode; sudo might ask for a password\n"
    sudo /usr/sbin/DevToolsSecurity -enable
  fi

  local uname_machine homebrew_base homebrew_dir
  uname_machine="$(uname -m)"
  if [[ "${uname_machine}" == "arm64" ]]; then
    homebrew_base="/opt/homebrew"
  else
    homebrew_base="/usr/local"
  fi
  homebrew_dir="${homebrew_base}/Cellar"
  if [[ -d "${homebrew_dir}" ]]; then
    if [[ "${clean_install}" -eq 1 ]]; then
      # Uninstall Homebrew.
      curl_pipe_shell "${uninstall_url}"
      # Clean up stuff that uninstall leaves behind :(
      set +f
      rm -rf "${homebrew_base:?}"/Homebrew/*
      rm -rf "${homebrew_base:?}"/Homebrew/.??*
      rm -rf "${homebrew_base:?}"/bin/*
      rm -rf "${homebrew_base:?}"/etc/*
      rm -rf "${homebrew_base:?}"/lib/*
      rm -rf "${homebrew_base:?}"/share/*
      rm -rf "${homebrew_base:?}"/var/*
      set -f
    else
      printf "%s: %s exists; if necessary use --clean_install\\n" \
        "$0" "${homebrew_dir}" >&2
    fi
  fi
  if [[ ! -d "${homebrew_dir}" ]]; then
    # Install Homebrew.
    curl_pipe_shell "${install_url}"
  else
    # Get updates out of the way early when I'm running this a second time.
    brew-update-brew-cleanup
  fi

  # Ensure that brew is in $PATH.
  PATH="${homebrew_base}/bin:${PATH}"
  export PATH
  hash -r

  # Install packages I need.
  # Link completions so the shell can use them.
  brew completions link
  # Everything needed for backups.
  brew install coreutils lockrun rclone restic rsync
  # Basics.
  brew install fd less neovim ripgrep tmux vim
  if [[ "${ariane}" -eq 1 ]]; then
    return 0
  fi

  brew install autossh tmpreaper
  # Basic development.
  brew install bash-language-server fswatch lazygit markdownlint-cli \
    pre-commit ruff shellcheck vint wget

  # Neovim.
  brew install lua-language-server vscode-langservers-extracted

  if [[ "${laptop}" -eq 1 ]]; then
    # Misc development.
    brew install kcov
    # My website.
    brew install closure-compiler hugo markdown marksman prettier

    # PHP.
    brew install composer php phpstan phpunit

    # PHP: Uninstall any existing xdebug.
    pecl uninstall xdebug || true
    local php_config_dir
    for php_config_dir in $(php_config_dirs); do
      sed -i.bak -e '/zend_extension/d' "${php_config_dir}/php.ini"
    done

    # PHP: Install xdebug.
    mkdir -p "${homebrew_base}/lib/php/pecl"
    pecl install xdebug

    # PHP: Configure xdebug to support coverage.
    for php_config_dir in $(php_config_dirs); do
      cat > "${php_config_dir}/conf.d/99-xdebug.ini" <<CONFIG
xdebug.mode = coverage
CONFIG
    done

    # Update existing packages first.
    npm update -g
    # Lint for CSS.
    npm install -g csslint
    # Golang.
    brew install delve go golangci-lint gopls gotags govulncheck graphviz \
      staticcheck
    # Google Apps Script.  https://github.com/google/clasp
    npm install -g @google/clasp
    npm install -g typescript
    # Rust.
    brew install rustup
    rustup-init --no-modify-path -y

    # Fonts used by wezterm.
    # Should I use the nerd-font versions?  I haven't seen much need TBH.
    brew install \
      font-anonymous-pro \
      font-cousine \
      font-fira-code \
      font-hack \
      font-inconsolata-nerd-font \
      font-monaspace \
      font-pt-mono \
      font-red-hat-mono \
      font-source-code-pro

    # Calibre.
    cask_install "/Applications/calibre.app" calibre
    cask_install "/Applications/WezTerm.app" wezterm
  fi
  if [[ "${imac}" -eq 1 ]]; then
    # Various tools for downloads.
    brew install ffmpeg transmission-cli wget yt-dlp
    cask_install "/Applications/FileBot.app" filebot
  fi
  # Tools needed by vim; mostly Golang, with a bit of Rust if it's installed.
  install-extra-development-tools
  # All the Python modules I need for development.
  update-python-modules

  # Install GUI apps if running locally so that confirmation dialogues work.
  if [[ -z "${SSH_CONNECTION:-}" ]]; then
    brew install --cask witch
    cask_install "/Applications/Moom.app" moom
    cask_install "/Applications/Time Out.app" time-out
  fi
}

main "$@"
