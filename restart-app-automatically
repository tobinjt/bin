#!/bin/bash

set -e -f -u -o pipefail

output_plist() {
  local app="$1" label="$2" timeout="$3"
  # Set up launchd to automatically restart the app when it exits.
  # https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html
  # man launchd.plist
  # Cookbook section in https://www.launchd.info/
  cat <<END_OF_PLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>RunAtLoad</key> <true/>
        <key>KeepAlive</key> <true/>
        <key>Label</key> <string>${label}</string>
        <key>ProgramArguments</key>
        <array>
                <string>${HOME}/bin/restart-app-automatically-wrapper</string>
                <string>${timeout}</string>
                <string>${app}</string>
        </array>
</dict>
</plist>
END_OF_PLIST
}

usage() {
    cat >&2 <<USAGE
Usage: $0 DEST_FILE APP_PATH SERVICE_LABEL ACTION [TIMEOUT]
E.g. $0 pauses.restart.plist /Applications/Pauses.app Pauses.restart start
- ACTION must be one of: list load remove restart start stop unload
- DEST_FILE will be written in ${HOME}/Library/LaunchAgents
- APP_PATH should be the path to the application base directory, e.g.
  /Applications/foo.app
USAGE
    return 1
}

main() {
  if [[ "$#" -ne 4 && "$#" -ne 5 ]]; then
    usage
    return 1
  fi

  local DEST="${HOME}/Library/LaunchAgents/$1"
  local APP="$2" LABEL="$3" ACTION="$4" TIMEOUT="${5:-60}"

  if [[ ! -f "${DEST}" ]]; then
      output_plist "${APP}" "${LABEL}" "${TIMEOUT}" > "${DEST}"
  fi
  if ! diff -u "${DEST}" <(output_plist "${APP}" "${LABEL}" "${TIMEOUT}"); then
    if launchctl list | grep -q "${LABEL}"; then
      # This will kill the app, which is really annoying, but there doesn't seem
      # to be any other way to get launchd to reread the config :(
      launchctl unload "${DEST}"
      # Give the app some time to exit.
      sleep 10
      # We do not load the config again; any action that needs the config to be
      # loaded ensures that it's loaded, which also handles the situation where
      # the user manually unloaded the config.
    fi
    output_plist "${APP}" "${LABEL}" "${TIMEOUT}" > "${DEST}"
  fi

  case "${ACTION}" in
    list)
      if ! launchctl list | grep -q "${LABEL}"; then
        launchctl load "${DEST}"
        sleep 1
      fi
      launchctl "${ACTION}" "${LABEL}"
      ;;
    load)
      launchctl "${ACTION}" -w "${LABEL}"
      ;;
    remove)
      if launchctl list | grep -q "${LABEL}"; then
        launchctl "${ACTION}" "${LABEL}"
      fi
      ;;
    restart)
      launchctl unload "${DEST}"
      sleep 1
      launchctl load -w "${DEST}"
      sleep 1
      launchctl start "${LABEL}"
      ;;
    start)
      if ! launchctl list | grep -q "${LABEL}"; then
        launchctl load -w "${DEST}"
        sleep 1
      fi
      launchctl "${ACTION}" "${LABEL}"
      ;;
    stop)
      printf "WARNING: stop is unreliable, consider using unload instead\\n" >&2
      if launchctl list | grep -q "${LABEL}"; then
        launchctl "${ACTION}" "${LABEL}"
      fi
      ;;
    unload)
      if launchctl list | grep -q "${LABEL}"; then
        launchctl "${ACTION}" -w "${LABEL}"
      fi
      ;;
    *)
      printf "Unknown action: %s\\n" "${ACTION}" >&2
      usage
      ;;
  esac
}

main "$@"
