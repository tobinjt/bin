#!/usr/bin/python2.4
#
# Copyright 2010 Google Inc. All Rights Reserved.

"""Display the number of seconds of downtime than N nines uptime allows.

Uptime is usually described as N nines, e.g. 3 nines is 99.9% uptime, 6 nines is
99.9999% uptime.  This program displays how much downtime per year is allowed by
N nines uptime, e.g. 6 nines uptime allows 31.536 seconds per year of downtime.
"""

__author__ = "johntobin@google.com (John Tobin)"

import sys


def StripTrailingZeros(number):
  """Strip unnecessary trailing zeros from a number.

  Args:
    number: a number, either an integer or a string

  Returns:
    A string representing number, with any unnecessary trailing zeros removed.
  """
  string = str(number)
  if string.find(".") != -1:
    string = string.rstrip("0").rstrip(".")
  return string


def main(argv):
  if len(argv) <= 1:
    sys.exit("Usage: %s NUMBER_OF_NINES [NUMBER_OF_NINES . . .]" % argv[0])

  time_units = {}
  seconds_so_far = 1
  for (number, label) in ((60, "minutes"),
                          (60, "hours"),
                          (24, "days"),
                          (365, "year")):
    seconds_so_far *= number
    time_units[seconds_so_far] = label
  seconds_per_year = seconds_so_far

  for num_nines in argv[1:]:
    try:
      num_nines = int(num_nines)
    except ValueError:
      sys.exit("Argument is not a number: %s" % str(num_nines))

    downtime_fraction = 10 ** -num_nines
    downtime_seconds = downtime_fraction * seconds_per_year

    friendly_time = ""
    keys = time_units.keys()
    keys.sort()
    for num_seconds in keys:
      if num_seconds <= downtime_seconds:
        friendly_num = 1.0 * downtime_seconds / num_seconds
        friendly_time = " (%s %s)" % (StripTrailingZeros(friendly_num),
                                      time_units[num_seconds])

    print ("%d: %s%%: %s seconds%s"
           % (num_nines,
              StripTrailingZeros(100 * (1 - downtime_fraction)),
              StripTrailingZeros(downtime_seconds),
              friendly_time))

if __name__ == "__main__":
  main(sys.argv)
