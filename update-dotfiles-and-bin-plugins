#!/bin/bash

set -e -f -u -o pipefail

# To update all the git submodules: update-dotfiles-and-bin-plugins
# To update a single submodule:
#   $ git fetch origin --tags && git checkout master && git pull
# To add a new submodule:
#   $ git submodule add URL DESTINATION
#   $ git submodule add \
#       https://github.com/junegunn/vim-plug.git .vim/bundle/vim-plug
#   Add a "Plug 'foo/bar'" line below and commit the changes.
#   $ update-dotfiles-and-bin
# To remove a submodule:
#   $ DESTINATION=".vim/bundle/asdf"
#   $ git rm "${DESTINATION}" && rm -rf ".git/modules/${DESTINATION}"
#   Remove any config for the plugin.
#   Remove the "Plug 'foo/bar'" line below and commit the changes.
#   $ update-dotfiles-and-bin
#   It will complain about files left behind, copy and paste the commands to
#   clean up.
# To use a branch other than master:
#   $ git submodule set-branch --branch BRANCH SUBMODULE_PATH
#   $ git submodule set-branch --branch main .vim/bundle/vim-plug
#   $ git diff # Should show a branch line added in .gitmodules
#   # The branch in the submodule will look like `(HEAD detached at a53e340)`
#   # but it appears to work properly.

commit_any_changes() {
  # Commit the changes if any.
  git add -A .
  if ! git check-local-copy-is-clean --ignore-unpushed-commits 2>/dev/null; then
    git commit -m 'chore: Update all plugins.'
  fi
}

update-all-submodules() {
  local directory="$1"
  cd "${directory}"
  git submodule update --recursive --remote
  commit_any_changes
}

merge-upstream-changes() {
  local directory="$1" branch_name="$2"
  cd "${directory}"
  git checkout master
  git pull upstream master
  git push
  # Now merge them into my branch.
  git checkout "${branch_name}"
  git pull
  git merge master
  git push
}

update-neovim-plugins() {
  cd "${HOME}/src/dotfiles"
  run-if-exists nvim --headless -c "Lazy! sync" -c "qa"
  commit_any_changes
}

main() {
  # Check there aren't any diffs.
  update-dotfiles-and-bin

  update-all-submodules "${HOME}/bin"
  update-all-submodules "${HOME}/src/dotfiles"
  # Force overwriting and deletion of removed files.
  dotfiles -f -X
  update-neovim-plugins
  dotfiles -f -X

  # Push to upstream, update vim helptags, etc.
  update-dotfiles-and-bin
}

# Stop git looking for a commit message when 'git pull' is run.
GIT_MERGE_AUTOEDIT=no
export GIT_MERGE_AUTOEDIT
main "$@"
