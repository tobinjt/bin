#!/bin/bash

set -e -f -u -o pipefail

usage() {
  printf "Usage: %s [--skip_clean_install]\\n" "$0" >&2
  exit 1
}

clean_python_install() {
  # An automatic update will occur when installing python, so do a manual update
  # first to reduce the time where python is not installed.
  brew update
  set +f
  local dir dirs=(/usr/local/Cellar/python*)
  set -f
  # Deleting site-packages will break pip.  The postinstall needs to run to
  # setup pip => fully delete all Python versions and reinstall them.  `brew
  # reinstall` would be an option but would leave unnecessary versions around.
  for dir in "${dirs[@]}"; do
    brew remove --ignore-dependencies "$(basename "${dir}")"
  done
  # BEWARE: this will nuke any other locally installed packages, so those
  # packages need to be included in the list for reinstallation.
  set +f
  rm -rf /usr/local/lib/python*/site-packages
  set -f

  # Frequently there are installed package depending on 2 Python versions, but
  # installing "python" will only install the latest Python, so figure out all
  # required versions.
  local version uses
  # `brew search python@` returns all kinds of packages, so list all packages
  # and grep instead.
  for version in $(brew search | grep python@); do
    uses="$(brew uses --installed "${version}")"
    if [[ -z "${uses}" ]]; then
      printf "Skipping unnecessary version %s\\n" "${version}"
      continue
    fi
    printf "Installing version %s required by %s\\n" "${version}" "${uses}"
    brew install "${version}"
  done
  # This seems to be unnecessary but not harmful so leave it in.
  brew install python
}

virtualenv_install() {
  local destdir="$1"
  shift

  mkdir -p "${destdir}"
  # Run virtualenv from the destination directory just in case.
  cd "${destdir}"
  virtualenv --clear "${destdir}"
  # virtualenv sometimes deletes the destination directory so cd there again.
  cd "${destdir}"
  # shellcheck disable=SC1091
  source bin/activate
  pip3 install "$@"
  deactivate
}

main() {
  if [[ "$(uname -s)" != "Darwin" ]]; then
    printf "Only Mac OS is supported, sorry.\\n" >&2
    exit 1
  fi
  local skip_clean_install=0
  if [[ "$#" -eq 1 && "$1" == "--skip_clean_install" ]]; then
    skip_clean_install=1
    shift
  fi
  if [[ "$#" -ne 0 ]]; then
    usage
  fi

  # Dummy values needed by activate scripts.
  export PS1="dummy"
  # Let Python write bytecode.
  unset PYTHONDONTWRITEBYTECODE

  # Clean up existing install.
  local basedir="${HOME}/tmp/python"
  rm -rf "${basedir}"
  if [[ "${skip_clean_install}" -eq 0 ]]; then
    clean_python_install
  fi
  pip3 install virtualenv

  # Flexget.  Only install and test on machines where I normally run flexget.
  if [[ -d "${HOME}/.flexget/logs" ]]; then
    virtualenv_install "${basedir}/flexget" "flexget" "transmissionrpc"
    flexget-wrapper execute
    printf "\\n\\n\\n\\n\\n"
  fi

  # Python development is installed globally so it's easier to use.
  # mypy needs lxml but doesn't depend on it.
  # Install packages one by one so that it's easier to figure out which package
  # is broken when something goes wrong.
  # Removed packages: mutmut depends on pony which doesn't support Python 3.9.
  local package packages=(lxml mypy pudb pyfakefs pylint pytest)
  packages+=(pytest-cov pyyaml yapf)
  for package in "${packages[@]}"; do
    printf "\n\npip3 install %s\\n" "${package}"
    pip3 install "${package}"
  done

  # Check that tools work properly.
  cd "${HOME}/bin/python"
  pytest
  set +f
  pylint -- *.py
  mypy -- *.py
  set -f
}

main "$@"
