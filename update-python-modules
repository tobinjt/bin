#!/bin/bash

set -e -f -u -o pipefail

usage() {
  printf "Usage: %s\\n" "$0" >&2
  exit 1
}

clean_python_install() {
  # An automatic update will occur when installing python, so do a manual update
  # first to reduce the time where python is not installed.
  brew update
  set +f
  local dir dirs=(/usr/local/Cellar/python*)
  set -f
  for dir in "${dirs[@]}"; do
    brew remove --ignore-dependencies "$(basename "${dir}")"
  done
  # BEWARE: this will nuke any other locally installed packages, so those
  # packages need to be included in the list for reinstallation.
  set +f
  rm -rf /usr/local/lib/python*/site-packages
  set -f
  brew install python
}

virtualenv_install() {
  local destdir="$1"
  shift

  mkdir -p "${destdir}"
  # Run virtualenv from the destination directory just in case.
  cd "${destdir}"
  virtualenv --clear "${destdir}"
  # virtualenv sometimes deletes the destination directory so cd there again.
  cd "${destdir}"
  # shellcheck disable=SC1091
  source bin/activate
  pip3.8 install "$@"
  deactivate
}

main() {
  if [[ "$(uname -s)" != "Darwin" ]]; then
    printf "Only Mac OS is supported, sorry.\\n" >&2
    exit 1
  fi
  if [[ "$#" -ne 0 ]]; then
    usage
  fi

  # Dummy values needed by activate scripts.
  export PS1="dummy"
  # Let Python write bytecode.
  unset PYTHONDONTWRITEBYTECODE

  # Clean up existing install.
  local basedir="${HOME}/tmp/python"
  rm -rf "${basedir}"
  clean_python_install
  pip3.8 install virtualenv

  # Flexget.  Only install and test on machines where I normally run flexget.
  if [[ -d "${HOME}/.flexget/logs" ]]; then
    virtualenv_install "${basedir}/flexget" "flexget" "transmissionrpc"
    flexget-wrapper
    printf "\\n\\n\\n\\n\\n"
  fi

  # Python development is installed globally so it's easier to use.
  # mypy needs lxml but doesn't depend on it.
  pip3.8 install lxml mutmut mypy pudb pyfakefs pylint pytest pytest-cov
  # Check that tools work properly.
  cd "${HOME}/bin/python"
  pytest
  set +f
  pylint -- *.py
  mypy -- *.py
  set -f
}

main "$@"
