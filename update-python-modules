#!/bin/bash

set -e -f -u -o pipefail

usage() {
  printf "Usage: %s [--skip_clean_install]\\n" "$0"
}

packages_to_relink() {
  find /usr/local/Cellar -name site-packages \
    | cut -d / -f 5 \
    | grep -v ^python \
    | sort \
    | uniq
}

clean_python_install() {
  set +f
  local dir dirs=(/usr/local/Cellar/python*)
  set -f
  # Deleting site-packages will break pip.  The postinstall needs to run to
  # setup pip => fully delete all Python versions and reinstall them.  `brew
  # reinstall` would be an option but would leave unnecessary versions around.
  for dir in "${dirs[@]}"; do
    brew remove --ignore-dependencies "$(basename "${dir}")"
  done
  # BEWARE: this will nuke any other locally installed packages, so those
  # packages need to be included in the list for reinstallation.
  set +f
  rm -rf /usr/local/lib/python*/site-packages
  set -f

  # Frequently there are installed package depending on 2 Python versions, but
  # installing "python" will only install the latest Python, so figure out all
  # required versions.
  local version uses
  # `brew search python@` returns all kinds of packages, so list all packages
  # and grep instead.  Sort by version so we install the newest version last.
  for version in $(brew formulae | grep python@ | sort -t . -k2n); do
    uses="$(brew uses --installed "${version}")"
    if [[ -z "${uses}" ]]; then
      printf "Skipping unnecessary version %s\\n" "${version}"
      continue
    fi
    printf "Installing version %s required by %s\\n" "${version}" "${uses}"
    brew install "${version}"
  done

  # Relink packages that would have been damaged by deleting site-packages.
  packages_to_relink | xargs brew unlink
  packages_to_relink | xargs brew link
}

virtualenv_install() {
  local destdir="$1"
  shift

  brew install virtualenv
  mkdir -p "${destdir}"
  # Run virtualenv from the destination directory just in case.
  cd "${destdir}"
  virtualenv --clear "${destdir}"
  # virtualenv sometimes deletes the destination directory so cd there again.
  cd "${destdir}"
  source bin/activate

  # Install packages one by one so that it's easier to figure out which package
  # is broken when something goes wrong.
  local package
  for package in "$@"; do
    printf "\n\npip3 install %s\\n" "${package}"
    pip3 install "${package}"
  done
  deactivate
}

main() {
  if ! is_mac_os; then
    printf "Only Mac OS is supported, sorry.\\n" >&2
    exit 1
  fi
  local skip_clean_install=0
  while :; do
    case "${1:-}" in
      --skip_clean_install)
        skip_clean_install=1
        shift
        ;;
      ?*)
        usage >&2
        return 1
        ;;
      '')
        # Empty string when $1 doesn't expand to anything, argument processing
        # finished successfully.
        break
        ;;
    esac
  done

  # Dummy values needed by activate scripts.
  export PS1="dummy"
  # Let Python write bytecode.
  unset PYTHONDONTWRITEBYTECODE

  # Clean up existing install.
  local virtualenv_dir="${HOME}/tmp/virtualenv"
  rm -rf "${virtualenv_dir}"
  if [[ "${skip_clean_install}" -eq 0 ]]; then
    # Updating Python often requires updating a dependency, so let's just update
    # everything.  This means we'll update Python, then uninstall it, then
    # install it again which is inefficient but that's the only downside.
    bubc
    clean_python_install
  fi

  # Flexget.  Only install and test on machines where I normally run flexget.
  if [[ -d "${HOME}/tmp/logs/flexget" ]]; then
    virtualenv_install "${virtualenv_dir}/flexget" "flexget" "transmission-rpc"
    printf "\\n\\nTesting Flexget\\n"
    flexget-wrapper execute
    printf "\\n\\n\\n\\n\\n"
  fi

  # I tried using homebrew packages for some tools, but that lead to a terrible
  # mix of Python versions and tools not finding modules so I reverted to using
  # Pip for everything.

  # Install all Python development tools in a single virtualenv so all the
  # modules are easily available at the same time.
  # Removed packages: mutmut depends on pony which doesn't support Python 3.9.
  # mypy needs lxml but doesn't depend on it.
  virtualenv_install "${virtualenv_dir}/python" lxml mypy pudb pyfakefs pylint \
    pytest pytest-cov pytest-flakefinder pyyaml yapf
  # Normally $PATH will contain this directory; add it so that initial
  # installation works when $PATH does not contain it.
  PATH="${PATH}:${virtualenv_dir}/python/bin"
  hash -r

  # Check that tools work properly.
  cd "${HOME}/bin/python"
  pytest
  set +f
  pylint -- *.py
  mypy -- *.py
  set -f
}

main "$@"
