#!/bin/bash

set -e -f -u -o pipefail

usage() {
  cat <<USAGE
$0 [FLAGS]
Flags:
  --install_individually
  --skip_brew
  --skip_flexget
  --skip_python
USAGE
}

test_python() {
  cd "${HOME}/bin/python"
  pytest
  set +f
  mypy -- *.py
  set -f
}

test_flexget() {
  printf "\\n\\nTesting Flexget\\n"
  flexget-wrapper execute
  printf "\\n\\n\\n\\n\\n"
}

virtualenv_install() {
  local destdir="$1" install_individually="$2" test_function="$3"
  shift 3
  local date
  date="$(date +%Y-%m-%d--%H-%M-%S)"
  local destdir_date="${destdir}-${date}"

  mkdir -p "${destdir_date}"
  # Run virtualenv from the destination directory just in case.
  cd "${destdir_date}"
  virtualenv --no-periodic-update "${destdir_date}"
  # virtualenv sometimes deletes the destination directory so cd there again.
  cd "${destdir_date}"
  source bin/activate

  if [[ "${install_individually}" -eq 0 ]]; then
    # Install everything at once so that dependencies get resolved properly
    # across packages.
    pip3 install "$@"
  else
    # Install packages one by one so that it's easier to figure out which
    # package is broken when something goes wrong.
    local package
    for package in "$@"; do
      printf "\n\npip3 install %s\\n" "${package}"
      pip3 install "${package}"
    done
  fi
  deactivate

  # Test with the new binaries, from $HOME, just in case.
  cd "${HOME}"
  PATH="${destdir_date}/bin:${PATH}"
  hash -r
  ("${test_function}")

  # -h: don't follow a destination symlink, replace it instead.
  ln -sfh "${destdir_date}" "${destdir}"
}

main() {
  if ! is_mac_os; then
    printf "Only Mac OS is supported, sorry.\\n" >&2
    exit 1
  fi
  local skip_brew=0 skip_flexget=0 skip_python=0 install_individually=0
  while [[ "$#" -gt 0 ]]; do
    case "${1}" in
      --install_individually)
        install_individually=1
        shift
        ;;
      --skip_brew)
        skip_brew=1
        shift
        ;;
      --skip_flexget)
        skip_flexget=1
        shift
        ;;
      --skip_python)
        skip_python=1
        shift
        ;;
      *)
        usage >&2
        return 1
        ;;
    esac
  done

  # Let Python write bytecode.
  unset PYTHONDONTWRITEBYTECODE
  if [[ "${skip_brew}" -eq 0 ]]; then
    # Update all existing Homebrew packages rather than partially upgrading when
    # installing python and virtualenv.
    brew-update-brew-cleanup
    # Install Python and virtualenv, just in case.
    brew install python virtualenv
  fi

  # Dummy values needed by activate scripts.
  export PS1="dummy"

  # I tried using homebrew packages for some tools, but that lead to a terrible
  # mix of Python versions and tools not finding modules so I reverted to using
  # Pip for everything.

  local virtualenv_dir="${HOME}/tmp/virtualenv"
  readonly virtualenv_dir
  mkdir -p "${virtualenv_dir}"

  # Install all Python development tools in a single virtualenv so all the
  # modules are easily available at the same time.
  # Removed packages: mutmut depends on pony which doesn't support Python 3.9.
  # mypy needs lxml but doesn't depend on it.
  if [[ "${skip_python}" -eq 0 ]]; then
    local python_dir="${virtualenv_dir}/python"
    # Run in a subshell because it changes directory.
    (virtualenv_install "${python_dir}" "${install_individually}" test_python \
      black \
      identify \
      lxml \
      mypy \
      pudb \
      pydantic \
      pyfakefs \
      pytest \
      pytest-cov \
      pytest-flakefinder \
      python-lsp-black \
      'python-lsp-server[all]' \
      pyyaml \
      types-PyYAML)
  fi

  # Flexget.  Only install and test on machines where I normally run flexget.
  if [[ "${skip_flexget}" -eq 0 && -d "${HOME}/tmp/logs/flexget" ]]; then
    # Run in a subshell because it changes directory.
    (virtualenv_install "${virtualenv_dir}/flexget" "${install_individually}" \
      test_flexget \
      "flexget" \
      "legacy-cgi" \
      "transmission-rpc")
  fi
}

main "$@"
