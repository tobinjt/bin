#!/bin/bash

set -e -f -u -o pipefail

# This is duplicated in ~/src/dotfiles/.dotfiles.d/10-ssh-config.sh.
dotfiles_sources() {
  find "${HOME}/src" -maxdepth 1 -iname '*dotfiles*' -type d
}

list_config_snippets() {
  local config_snippets_dir="$1"
  find "${config_snippets_dir}" -type f -perm -0100 -print | sort
}

main() {
  local IGNORE_FILENAME=".dotfiles.ignore"
  readonly IGNORE_FILENAME
  local flags=("--ignore_symlinks") return_early=0 opt
  while getopts ":dfhrX" opt "$@"; do
    case "${opt}" in
      d)
        flags+=("--dryrun")
        return_early=1
        ;;
      f)
        flags+=("--force")
        ;;
      h)
        cat <<END_OF_HELP
Usage: $0 [-d] [-f] [-r] [-X]
Links files in ${HOME}/src/*dotfiles* to ${HOME}
Files and directories listed in ${HOME}/src/*dotfiles*/${IGNORE_FILENAME} will
be ignored.  Note: ${IGNORE_FILENAME} lists are global, not scoped to the
directory containing them.

Options:
  -f: force overwrite of files that differ.
  -d: dry run, overrides -f.
  -r: report unexpected files in destination.
  -X: delete unexpected files in destination.
END_OF_HELP
        exit 0
        ;;
      r)
        flags+=("--report_unexpected_files" "--ignore_unexpected_children")
        return_early=1
        ;;
      X)
        flags+=("--delete_unexpected_files" "--ignore_unexpected_children")
        ;;
      *)
        echo "Unrecognised flag: ${OPTARG}" >&2
        exit 1
    esac
  done

  local SKIP_FLAGS=("--ignore_pattern=tags" "--ignore_pattern=*.pyc")
  SKIP_FLAGS+=("--ignore_pattern=*.spl")
  readonly SKIP_FLAGS
  local SKIP_FILES=() SOURCE_DIRS=() dir
  for dir in $(dotfiles_sources); do
    SOURCE_DIRS+=("${dir}")
    if [[ -f "${dir}/${IGNORE_FILENAME}" ]]; then
      SKIP_FILES+=("--ignore_file=${dir}/${IGNORE_FILENAME}")
    fi
  done
  readonly SKIP_FILES SOURCE_DIRS

  linkdirs \
    "${SKIP_FLAGS[@]:+${SKIP_FLAGS[@]}}" \
    "${SKIP_FILES[@]:+${SKIP_FILES[@]}}" \
    "${flags[@]:+${flags[@]}}" \
    "${SOURCE_DIRS[@]}" \
    "${HOME}"
  if [[ "${return_early}" -eq 1 ]]; then
    return
  fi

  local config_snippets_dir="${HOME}/.dotfiles.d"
  # TODO: remove after migration.
  mkdir -p "${config_snippets_dir}"

  local snippet
  for snippet in $(list_config_snippets "${config_snippets_dir}"); do
    printf "Running %s\n" "${snippet}"
    "${snippet}"
  done

  # Update vim stuff.
  # Stop TmuxSetWindowName loading: it's not useful and it doesn't work properly
  # when tmux is focused on a different pane.  'set t_u7=' stops '2R' appearing
  # in my shell input stream with older versions of vim.
  if grep -q -r UpdateBundleHelptags "${HOME}/.vim/plugin/"; then
    vim --cmd 'let g:loaded_TmuxSetWindowName=1' --cmd 'set t_u7=' \
      -c 'call UpdateBundleHelptags() | call UpdateSpellFiles() | :quit'
  fi
}

main "$@"
