#!/bin/bash

set -e -f -u -o pipefail

dotfiles_sources() {
  find "${HOME}/src" -maxdepth 1 -iname '*dotfiles*' -type d
}

cat_ssh_configs() {
  find "${HOME}"/.ssh \
      -name 'config-??-*' \
      -a \( -not -name '*-os-*' -o -name '*-os-'"$(uname -s)"'-*' \) \
      -print0 \
    | sort --zero-terminated \
    | xargs -0 cat
}

main() {
  local IGNORE_FILENAME=".dotfiles.ignore"
  readonly IGNORE_FILENAME
  local flags=() return_early=0 opt
  while getopts ":dfhrX" opt "$@"; do
    case "${opt}" in
      d)
        flags+=("--dryrun")
        return_early=1
        ;;
      f)
        flags+=("--force")
        ;;
      h)
        cat <<END_OF_HELP
Usage: $0 [-d] [-f] [-r] [-X]
Links files in ${HOME}/src/*dotfiles* to ${HOME}
Files and directories listed in ${HOME}/src/*dotfiles*/${IGNORE_FILENAME} will
be ignored.  Note: ${IGNORE_FILENAME} lists are global, not scoped to the
directory containing them.

Options:
  -f: force overwrite of files that differ.
  -d: dry run, overrides -f.
  -r: report unexpected files in destination.
  -X: delete unexpected files in destination.
END_OF_HELP
        exit 0
        ;;
      r)
        flags+=("--report_unexpected_files" "--ignore_unexpected_children")
        return_early=1
        ;;
      X)
        flags+=("--delete_unexpected_files" "--ignore_unexpected_children")
        ;;
      *)
        echo "Unrecognised flag: ${OPTARG}" >&2
        exit 1
    esac
  done

  local SKIP_FLAGS=("--ignore_pattern=tags" "--ignore_pattern=*.pyc")
  SKIP_FLAGS+=("--ignore_pattern=*.spl")
  readonly SKIP_FLAGS
  local SKIP_FILES=() dir
  for dir in $(dotfiles_sources); do
    if [[ -f "${dir}/${IGNORE_FILENAME}" ]]; then
      SKIP_FILES+=("--ignore_file=${dir}/${IGNORE_FILENAME}")
    fi
  done
  readonly SKIP_FILES

  # Note: I only want to disable the warning for $(dotfiles_sources), but I
  # can't :/
  # shellcheck disable=SC2046
  linkdirs \
    "${SKIP_FLAGS[@]:+${SKIP_FLAGS[@]}}" \
    "${SKIP_FILES[@]:+${SKIP_FILES[@]}}" \
    "${flags[@]:+${flags[@]}}" \
    $(dotfiles_sources) \
    "${HOME}"
  if [[ "${return_early}" -eq 1 ]]; then
    return
  fi
  set +f
  chmod 600 "${HOME}"/.ssh/*
  set -f
  # Lock down some sensitive directories.
  local dir subdir
  for dir in "${HOME}" $(dotfiles_sources); do
    for subdir in .gnupg .ssh; do
      if [[ -d "${dir}/${subdir}" ]]; then
        chmod 700 "${dir}/${subdir}"
      fi
    done
  done
  cat_ssh_configs > /dev/null
  cat_ssh_configs > "${HOME}/.ssh/config"
  # Stop TmuxSetWindowName loading: it's not useful and it doesn't work properly
  # when tmux is focused on a different pane.  'set t_u7=' stops '2R' appearing
  # in my shell input stream with older versions of vim.
  vim --cmd 'let g:loaded_TmuxSetWindowName=1' --cmd 'set t_u7=' \
    -c 'call UpdateBundleHelptags() | call UpdateSpellFiles() | :quit'
}

main "$@"
