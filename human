#!/usr/bin/env perl

use strict;
use warnings;

use Math::BigFloat;

sub format_bytes {
  my ($number) = @_;

  my ($big_number) = Math::BigFloat->new($number);
  my ($last_suffix) = q{};

  foreach my $suffix (qw(kb mb gb tb pb)) {
    if ($big_number > 1024) {
      $big_number /= 1024;
      $last_suffix = $suffix;
    }
  }

  return sprintf "%.3f%s", $big_number, $last_suffix;
}

sub format_number {
  my ($number) = @_;

  my ($before_dot, $after_dot) = split /\./, $number, 2;
  1 while ($before_dot =~ s/(\d)(\d{3}(?:,|$))/$1,$2/);
  if ($after_dot) {
    return qq{$before_dot.$after_dot};
  }
  return $before_dot;
}

while (<>) {
    chomp;
    # Copied from Regexp::Common's $RE{num}{real}.
    my $re = qr/(?:(?i)(?:[-+]?)(?:(?=[.]?[0123456789])(?:[0123456789]*)
                (?:(?:[.])(?:[0123456789]{0,}))?)(?:(?:[E])
                (?:(?:[-+]?)(?:[0123456789]+))|))/x;
    my @parts = split /\b($re)\b/o;
    foreach my $part (@parts) {
        if ($part =~ m/^$re$/o and $part ne q{.}) {
            # Only humanise if it will help.
            my $format_number = format_number($part);
            if ($format_number eq $part) {
                print $part;
            } else {
                printf q{%s (%s; %s)},
                       $part, $format_number, format_bytes($part);
            }
        } else {
            print $part;
        }
    }
    print qq{\n};
}
