#!/bin/bash

set -e -f -u -o pipefail
usage() {
  cat <<USAGE
Usage: $0 [-s N] [PATH PATH . . .]
Usage: $0 -h
If no filenames are provided reads from stdin.
Args:
  -h: Show usage message.
  -s N: Skip output of paths with N or fewer components (/bin has 1 component),
        /bin/test has 2 components.
USAGE
}
warn() {
  echo "$@" >&2
}
die() {
  warn "$@"
  exit 1
}

SKIP=0
while getopts hs: flag; do
  case "${flag}" in
    h)
      usage
      exit 0
      ;;
    s)
      SKIP="${OPTARG}"
      if ! grep -q '^[[:digit:]]\+$' <<< "${SKIP}" > /dev/null; then
        die "Bad argument '${SKIP}'; argument to -s must be an integer."
      fi
      ;;
    ?)
      die "$(usage)"
      ;;
  esac
done
shift $(( OPTIND - 1 ))
readonly SKIP


if [[ "$#" -eq 0 ]]; then
  if [[ -t 0 ]]; then
    warn "Refusing to read from terminal."
    warn ""
    die "$(usage)"
  fi
  cat
else
  echo "$@"
fi \
  | fmt -1 \
  | awk -F '/' '
    { # Handle the presence or absence of leading slashes.
      if ($0 ~ /^\//) {
        path = "/";
      } else {
        path = "";
      }
      num_components = 0;
      for (i = 1; i <= NF; i++) {
        subdir = $i;
        # Skip empty path components; these come from before a leading slash or
        # from between repeated slashes.
        if (subdir != "") {
          num_components++;
          if (path ~ /[^\/]$/) {
            # The path already has contents and does not end with a slash, so we
            # need one as a separator.
            path = path "/";
          }
          path = path subdir;
          if (num_components > '"${SKIP}"') {
            print path;
          }
        }
      }
    }'
