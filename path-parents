#!/bin/bash

set -e -f -u -o pipefail
usage() {
  cat <<USAGE
Usage: $0 [-s N] [PATH PATH . . .]
Usage: $0 -h
If no filenames are provided reads from stdin.
Args:
  -h: Show usage message.
  -s N: Skip output of paths with N or fewer components (/bin has 1 component),
        /bin/test has 2 components.
USAGE
}
warn() {
  echo "$@" >&2
}

# Echo args if given or cat stdin if not.
args_or_stdin() {
  if [[ "$#" -eq 0 ]]; then
    if [[ -t 0 ]]; then
      warn "Refusing to read from terminal."
      warn ""
      warn "$(usage)"
      return 1
    fi
    cat
  else
    echo "$@"
  fi
}

main() {
  # Reset OPTIND every time, otherwise successive calls to main will skip
  # arguments.  E.g. call 'main -s 10 /etc/passwd' and OPTIND=2, then call it
  # again and because OPTIND stays set the first 2 args are skipped rather than
  # parsed.
  local SKIP=0 OPTIND=0
  while getopts hs: flag; do
    case "${flag}" in
      h)
        usage
        return 0
        ;;
      s)
        SKIP="${OPTARG}"
        if ! grep -q '^[[:digit:]]\+$' <<< "${SKIP}" > /dev/null; then
          warn "Bad argument '${SKIP}'; argument to -s must be an integer."
          return 1
        fi
        ;;
      ?)
        warn "$(usage)"
        return 1
        ;;
    esac
  done
  shift $(( OPTIND - 1 ))
  readonly SKIP

  args_or_stdin "$@" \
    | fmt -1 \
    | awk -v SKIP="${SKIP}" -f "${HOME}/bin/path-parents.awk"
}

# Only run main if being executed directly; do nothing if sourced for testing.
# Use basename so that it can be run as 'bash -x ./program ...'.
if [[ "$(basename "${BASH_SOURCE[0]}")" == "$(basename "${0}")" ]]; then
  main "$@"
fi
