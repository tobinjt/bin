#!/bin/bash

set -e -f -u -o pipefail

usage() {
  printf "%s: DIRECTORY [DIRECTORY...]\\n" "$0"
}

git_pull_and_push_if_possible() {
  # Explicitly enable the old default behaviour so that git doesn't spew
  # warnings.
  git config pull.rebase false
  if ! git config remote.origin.url >& /dev/null; then
    # Pull and push requires an origin.
    return
  fi
  if git transport-is-ssh && [[ -z "${SSH_AUTH_SOCK:-}" ]]; then
    # SSH transport requires ssh-agent.
    return
  fi
  git pull --quiet
  # Can't push to HTTPS repos without auth.
  if ! git transport-is-https; then
    git push
  fi
}

# Check that git repos don't have any uncommitted, unpushed, or unpulled
# changes.
check_single_repo() {
  if [[ ! -d ".git" ]]; then
    # Make it easy to run "check-git-repos ~/src/*".
    return 0
  fi
  # Pull to start with so that unpulled changes don't cause failures.
  git_pull_and_push_if_possible
  git check-local-copy-is-clean
  install-pre-commit-hooks
}

main() {
  while [[ "$#" -gt 0 ]]; do
    case "${1}" in
      -*)
        usage >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  local repo result=0
  for repo in "$@"; do
    # Make it easy to run "check-git-repos ~/src/*".
    if [[ ! -d "${repo}" ]]; then
      continue
    fi
    if [[ -t 0 ]]; then
      printf "%s\\n" "${repo}"
    fi
    # Bizzare Posix sh behaviour :(  See
    # https://unix.stackexchange.com/questions/65532/why-does-set-e-not-work-inside-subshells-with-parenthesis-followed-by-an-or
    (cd "${repo}"; check_single_repo) &
    if ! wait "$!"; then
      result=1
    fi
  done
  return "${result}"
}

# Stop git looking for a commit message when 'git pull' is run.
GIT_MERGE_AUTOEDIT=no
export GIT_MERGE_AUTOEDIT
main "$@"
