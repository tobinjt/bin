#!/bin/bash

set -e -f -u -o pipefail

# ~/.config/backups/restic-password needs a single line containing the password
# for the restic repositories.
#
# ~/.config/backups/restic-config.sh needs to define the following variables:
# - RESTIC_REPOSITORIES  - repositories to backup to.
# - DIRS_TO_BACKUP       - array of directories to backup.
#
# - To configure a Google Drive backup see https://rclone.org/drive/ and name
#   the target `google-drive-backups`.  Add `rclone:google-drive-backups:PATH`
#   to RESTIC_REPOSITORIES.
# - To configure an rsync.net backup:
#   - target="most likely the hostname", e.g. target="johntobin-laptop-2022".
#   - ssh_key_path="${HOME}/.ssh/rsync-net_restic/${target}"
#   - mkdir -p "$(dirname "${ssh_key_path}")"
#   - ssh_key_comment="rsync-net_restic_${target}"
#   - ssh-keygen -t rsa -b 4096 -o -N '' -q \
#       -f "${ssh_key_path}" -C "${ssh_key_comment}"
#   - Add this line to authorized_keys on rsync.net:
#     - restrict,command="rclone serve restic --stdio restic/${target}" PUB_KEY
#   - RESTIC_REPOSITORIES+=("ssh%rsync-net%rclone:${target}")
# - https://ruderich.org/simon/notes/append-only-backups-with-restic-and-rclone
#   has background info about using restricted ssh keys with restic and rclone.
source "${HOME}/.config/backups/restic-config.sh"

main() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 RESTIC_REPOSITORY"
    return 1
  fi

  local RESTIC_REPOSITORY="$1"
  local RESTIC_PASSWORD_FILE="${HOME}/.config/backups/restic-password"
  readonly RESTIC_REPOSITORY RESTIC_PASSWORD_FILE
  # Fix permissions, just in case.
  chmod 700 "$(dirname "${RESTIC_PASSWORD_FILE}")"
  chmod 400 "${RESTIC_PASSWORD_FILE}"
  # Ensure it can't accidentally use the wrong key.
  unset SSH_AUTH_SOCK

  # I am using flags rather than environment variables so that copy and paste of
  # commands for debugging is easier.
  local options=("--password-file=${RESTIC_PASSWORD_FILE}")

  if [[ "${RESTIC_REPOSITORY}" =~ ^ssh% ]]; then
    # Example: ssh%rsync-net%rclone:restic/johntobin-laptop-2022
    # ssh indicates that the repository is accessed via ssh.
    # rsync-net is the hostname of the server.
    local parts
    IFS='%' read -r -a parts <<< "${RESTIC_REPOSITORY}"
    local server="${parts[1]}"
    local destdir="${parts[2]}"
    options+=("--repo=${destdir}")

    # I'm using the full rclone command so that it works whether or not a forced
    # command is configured on the remote side.
    local ssh_key_file
    ssh_key_file="${HOME}/.ssh/${server}_restic/$(basename "${destdir}")"
    options+=("-o" "rclone.program=ssh -i ${ssh_key_file} ${server} rclone")
    options+=("-o" "rclone.args=serve restic --stdio --append-only")
  else
    options+=("--repo=${RESTIC_REPOSITORY}")
  fi

  if [[ ! -t 0 ]]; then
    options+=("--quiet")
  fi

  # Don't try to initialise a second time.
  if ! restic "${options[@]}" list keys > /dev/null; then
    restic "${options[@]}" init
  fi
  restic "${options[@]}" backup "${DIRS_TO_BACKUP[@]}"
}

main "$@"
