#!/bin/bash

set -e -f -u -o pipefail

# ~/.config/backups/restic-password needs a single line containing the password
# for the restic repositories.
#
# - To configure a Google Drive backup see https://rclone.org/drive/ and name
#   the target `google-drive-backups`.
# - To configure an rsync.net backup:
#   - target="most likely the hostname", e.g. target="johntobin-laptop-2022".
#   - ssh_key_path="${HOME}/.ssh/rsync-net_restic/${target}"
#   - mkdir -p "$(dirname "${ssh_key_path}")"
#   - ssh_key_comment="rsync-net_restic_${target}"
#   - ssh-keygen -t rsa -b 4096 -o -N '' -q \
#       -f "${ssh_key_path}" -C "${ssh_key_comment}"
#   - Add this line to authorized_keys on rsync.net:
#     - restrict,command="rclone serve restic --stdio restic/${target}" PUB_KEY
#   - backup-with-restic "ssh%rsync-net%rclone:${target}"
# - https://ruderich.org/simon/notes/append-only-backups-with-restic-and-rclone
#   has background info about using restricted ssh keys with restic and rclone.

main() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 RESTIC_REPOSITORY"
    return 1
  fi

  local RESTIC_REPOSITORY="$1"
  local RESTIC_PASSWORD_FILE="${HOME}/.config/backups/restic-password"
  readonly RESTIC_REPOSITORY RESTIC_PASSWORD_FILE
  # Fix permissions, just in case.
  chmod 700 "$(dirname "${RESTIC_PASSWORD_FILE}")"
  # Ensure it can't accidentally use the wrong key.
  unset SSH_AUTH_SOCK

  # I am using flags rather than environment variables so that copy and paste of
  # commands for debugging is easier.
  local options=("--password-file=${RESTIC_PASSWORD_FILE}")

  if [[ "${RESTIC_REPOSITORY}" =~ ^ssh% ]]; then
    # Example: ssh%rsync-net%rclone:restic/johntobin-laptop-2022
    # ssh indicates that the repository is accessed via ssh.
    # rsync-net is the hostname of the server.
    local parts
    IFS='%' read -r -a parts <<< "${RESTIC_REPOSITORY}"
    local server="${parts[1]}"
    local destdir="${parts[2]}"
    options+=("--repo=${destdir}")

    # I'm using the full rclone command so that it works whether or not a forced
    # command is configured on the remote side.
    local ssh_key_file
    ssh_key_file="${HOME}/.ssh/${server}_restic/$(basename "${destdir}")"
    if [[ ! -f "${ssh_key_file}" ]]; then
      mkdir -p "$(dirname "${ssh_key_file}")"
      ssh-keygen -t rsa -b 4096 -o -N '' -q \
        -f "${ssh_key_file}" -C "rsync-net_$(basename "${destdir}")"
      printf 'restrict,command="rclone serve restic --stdio --append-only '
      printf '%s"' "${destdir}"
      printf ',no-pty,no-agent-forwarding,no-port-forwarding '
      cat "${ssh_key_file}.pub"

      # We need to add the public key to the server's authorized_keys file.
      return 1
    fi
    options+=("-o" "rclone.program=ssh -i ${ssh_key_file} ${server} rclone")
    options+=("-o" "rclone.args=serve restic --stdio --append-only")
  else
    options+=("--repo=${RESTIC_REPOSITORY}")
  fi

  if [[ ! -t 0 ]]; then
    options+=("--quiet")
  fi

  local backup_configs=() line
  while IFS='' read -r line; do
    backup_configs+=("${line}");
  done < "${HOME}/.config/backups/dirs-to-backup"

  local dirs_to_backup=()
  local backup_config
  for backup_config in "${backup_configs[@]}"; do
    local directory
    IFS=":" read -r _ directory <<< "${backup_config}"
    directory="${directory/#\~/${HOME}}"
    # Only backup if the directory is writable, so unprivileged users don't try
    # to backup /etc.
    if [[ -d "${directory}" && -w "${directory}" ]]; then
      dirs_to_backup+=("${directory}")
    fi
  done

  # Don't try to initialise a second time, see
  # https://restic.readthedocs.io/en/stable/075_scripting.html#check-if-a-repository-is-already-initialized
  local exit_status=0
  restic "${options[@]}" cat config > /dev/null || exit_status="$?"
  if [[ "${exit_status}" -ne 0 ]]; then
    if [[ "${exit_status}" -eq 10 ]]; then
      restic "${options[@]}" init
    else
      echo "Error: restic init failed with exit status ${exit_status}."
      return 1
    fi
  fi
  restic "${options[@]}" backup "${dirs_to_backup[@]}"
}

main "$@"
