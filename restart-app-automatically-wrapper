#!/bin/bash

set -e -f -u -o pipefail

# Wrap apps that are automatically restarted by launchd.  This sleeps for 60
# seconds after the app exits, so that updates can be installed.  Why not do
# that using ThrottleInterval?  ThrottleInterval says "an app must run for at
# least this long", so if you kill a long-running app to upgrade it, launchd
# will just restart it automatically, and the upgrade process will fail.

# Kill any leftover processes from previous attempts.  Sleeps for 15 seconds in
# total if there are leftovers, 0 seconds if not.
kill_leftovers() {
  # Find and kill processes like "/Applications/Backup and
  # Sync.app/Contents/PlugIns/FinderSyncAPIExtension.appex/Contents/MacOS/FinderSyncAPIExtension"
  local app="$1"
  if [[ -z "$(leftover_pids "${app}")" ]]; then
    return 0
  fi

  leftover_pids "${app}" | xargs kill "-TERM"
  sleep 10
  leftover_pids "${app}" | xargs kill "-KILL"
  sleep 5
}

leftover_pids() {
  local app="$1"
  # ps produces output like:
  # 31329 /Applications/Backup and Sync.app/Contents/MacOS/Backup...
  # Use grep before awk because escaping the / in ${app} will be hard.
  # pgrep doesn't support matching on prefixes, disable shellcheck warning.
  # shellcheck disable=SC2009
  ps -u "${USER}" -x -o pid,comm \
    | (grep -F "${app}" || true) \
    | awk '{ print $1 }'
}

main() {
  if [[ "$#" -ne 2 ]]; then
    printf "Usage: %s --kill|TIMEOUT APP\n" "$0" >&2
    printf "E.g. %s 60 /Applications/Pauses.app\n" "$0" >&2
    printf "E.g. %s --kill /Applications/Pauses.app\n" "$0" >&2
    exit 1
  fi
  local exit_status=0 timeout="$1" app="$2"
  kill_leftovers "${app}"
  if [[ "${timeout}" == "--kill" ]]; then
    exit 0
  fi
  # Run the app.
  open -W "${app}" || exit_status="$?"
  sleep "${timeout}"
  exit "${exit_status}"
}

main "$@"
