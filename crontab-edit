#!/bin/bash

set -e -f -u -o pipefail

# Stop git looking for a commit message when 'git pull' is run.
GIT_MERGE_AUTOEDIT=no
export GIT_MERGE_AUTOEDIT

if [[ "$#" -eq 0 ]]; then
  # Program is being run interactively: set up $EDITOR to run this program,
  # then invoke `crontab -e` to trigger the else branch.
  ORIGINAL_EDITOR="${EDITOR}"
  export ORIGINAL_EDITOR
  EDITOR="$0" crontab -e
else
  # crontab has invoked this as an editor.
  cd "${HOME}/src/private-configs"
  git check-local-copy-is-clean --ignore-unpushed-commits
  git pull
  git push
  FILENAME="crontab.${USER}.${HOSTNAME/local/lan}"
  if [[ ! -f "${FILENAME}" ]]; then
    touch "${FILENAME}"
  fi
  # Update the PATH variable in the crontab file with my current PATH.
  sed -i '' -e "s,^PATH=.*,PATH=${PATH}," "${FILENAME}"
  ${ORIGINAL_EDITOR} -d "${FILENAME}" "$@"
  while ! diff -u "${FILENAME}" "$@"; do
    printf "Found diffs between tmp file and repo!\\n"
    read -r -p "Press enter to edit again: "
    ${ORIGINAL_EDITOR} -d "${FILENAME}" "$@"
  done
  if ! git check-local-copy-is-clean; then
    # Git tracks symlinks, so it does not follow them, so I need to follow them.
    if [[ -L "${FILENAME}" ]]; then
      git add "$(readlink "${FILENAME}")"
    else
      git add "${FILENAME}"
    fi
    EDITOR="${ORIGINAL_EDITOR}" git commit --edit \
      --message 'BEWARE: An empty commit message will cause the commit to fail!'
  fi
  git pull
  git push
fi
