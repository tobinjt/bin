#!/usr/bin/env perl

use strict;
use warnings;

if (@ARGV) {
    die qq{Usage: $0 < lisp-code > foo.mdwn\n};
}

my @output;

PROBLEM_LINE:
while (<>) {
    unless (m/^;/ or m/^$/) {
        last PROBLEM_LINE;
    }
    s/; \{\{\{//;
    s/; \}\}\}//;
    s/^;/>/;
    push @output, $_;
}

push @output, <<"MIDDLE";
Here's my LISP solution:

MIDDLE

my $number;
do {
    if (m/defun.*project-euler-(\d+)/) {
        if (defined $number) {
            warn qq{$0: input contains more than one project-euler- function.\n};
        }
        $number = $1;
    }
    s/; \{\{\{//;
    s/; \}\}\}//;
    s/^/    /;
    push @output, $_;
} while (<>);

print <<"HEADER";
[Project Euler problem
$number:](http://projecteuler.net/index.php?section=problems&id=$number)

HEADER
print @output;
print <<"FOOTER"

[[!tag LISP Project_Euler programming]]
FOOTER
