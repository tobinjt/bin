#!/usr/bin/env python

"""%prog [OPTIONS] FILENAME1 FILENAME2 [FILENAMES].

Split each line into a (key, value) pair.  Each key is checked in every file; if
the values are different, the key and the values from every file are displayed.
Files do not need to be sorted.
"""

import optparse
import re
import sys
import prettytable

__author__ = "johntobin@google.com (John Tobin)"


def main(argv):
  # __doc__ is written to pass pylint checks, so it must be changed before being
  # used as a usage message.
  usage = __doc__.rstrip().replace(".", "", 1)
  argv_parser = optparse.OptionParser(usage=usage)
  argv_parser.add_option("-d", "--delimiter",
                         action="store", dest="delimiter", default=r"\s+",
                         help="Regex delimiting keys and values; "
                         "defaults to whitespace")
  (options, filenames) = argv_parser.parse_args(argv[1:])
  program = argv[0]
  if len(filenames) < 2:
    sys.exit("Usage: %s FILENAME1 FILENAME2 [FILENAMES]" % program)

  data = {}
  all_keys = {}
  sample_values = {}
  for filename in filenames:
    data[filename] = {}
    keys_in_filename = {}
    line_number = 0
    try:
      file_handle = open(filename, "r")
    except IOError, e:
      sys.exit("%s: %s" % (filename, e.strerror))
    for line in file_handle:
      line_number += 1
      line = line.rstrip("\n")
      fields = re.split(options.delimiter, line, 1)
      if len(fields) != 2:
        sys.exit("%s: %s: missing delimiter" % (filename, line_number))
      key, value = fields
      if key in keys_in_filename:
        sys.exit("%s: %d: duplicate key \"%s\" previously seen at line %d" %
            (key, line_number, key, keys_in_filename[key]))
      keys_in_filename[key] = line_number
      data[filename][key] = value
      sample_values[key] = value
      all_keys[key] = 1

  column_names = [""]
  column_names.extend(filenames)
  table = prettytable.PrettyTable(column_names)
  for key in sorted(all_keys):
    different = False
    for filename in filenames:
      if key not in data[filename] or data[filename][key] != sample_values[key]:
        different = True
        break
    if not different:
      continue
    columns = [key]
    for filename in filenames:
      columns.append(data[filename].get(key, ""))
    table.add_row(columns)

  print table


if __name__ == "__main__":
  main(sys.argv)
