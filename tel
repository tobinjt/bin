#!/usr/bin/env perl

# This program is based loosely on Mike McGovern's tel.  His orginal version had
# lots of hard coded values etc which didn't work when we copied it to matrix.
# My original version used Net::Telnet, which was a bit overkill really.  You
# can see the original code in ~mackers/bin/aun ;)

# This is the third version, which removes the broken joining of arguments with
# spaces and instead treats multiple arguments as multiple queries.
# It also has a read-and-query loop if no arguments are supplied.
# $Id$

use warnings;
use strict;

use IO::Socket::INET	qw ();
use IO::Handle		qw ();

sub query ($) {
	my $query = $_ [0];
	my $ph = IO::Socket::INET->new (	PeerAddr	=> "ph.tcd.ie",
						PeerPort	=> 105,
						Proto 		=> "tcp" )
		or die "Couldn't connect to ph.tcd.ie: $!";
	$query =~ m/\n$/ or $query .= "\n";
	print $ph $query
		or die "$0: failed to send query: $!\n";
	while ( <$ph> ) {
		print;
		# This probably isn't necessary any more; the socket is closed
		# on the remote end quite quickly nowadays, but just in case . .
		m/^200:Ok\.$/ and last;
	}
}


foreach my $arg ( @ARGV ) {
	if ( $arg eq "-h" or $arg eq "--help" ) {
		query ( "help" );
		exit 0;
	}
}

if ( @ARGV ) {
	foreach my $query ( @ARGV ) {
		query ( $query );
	}
	exit 0;
}

STDOUT->autoflush ( 1 );
my $prompt = "Please enter a query (help gives instructions, ^D quits): ";
print $prompt;
while ( <STDIN> ) {
	query ( $_ );
	print $prompt;
}
print "\n";
