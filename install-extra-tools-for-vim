#!/bin/bash

set -e -f -u -o pipefail

# If you run 'go get' from a directory containing go source code it will change
# go.{mod,sum} in that directory, so change to a temporary directory.
cd "${TMPDIR}"
if type go >& /dev/null; then
  # Clean up old binaries so that GoInstallBinaries will install updated
  # binaries.
  bindir="${GOPATH}/bin"
  if [[ -d "${bindir}" ]]; then
    printf "Clearing out old binaries from %s\\n" "${bindir}"
    find "${bindir}" -type f -mmin +60 -delete
  fi
  # Binaries needed by vim-go; use GoInstallBinaries because GoUpdateBinaries
  # would install second copies of homebrew binaries; all the existing binaries
  # have been deleted so fresh binaries will be built.
  vim -c 'execute ":GoInstallBinaries" | :quit'

  # Tools used by Syntastic; some of the tools are installed by GoUpdateBinaries
  # so I don't need to install them a second time.
  go get -u golang.org/x/tools/cmd/gotype

  if type codesign >& /dev/null; then
    # Debugger; installed by vim-go, manual instructions at
    # https://github.com/go-delve/delve/blob/master/Documentation/installation/README.md
    # Enable developer mode to avoid repeated password prompts.
    sudo /usr/sbin/DevToolsSecurity -enable
    # Needs to be signed to avoid repeated password prompts.
    # I manually followed the steps to create the cert in
    # https://sourceware.org/gdb/wiki/PermissionsDarwin
    xml="$(mktemp /tmp/code-signing.XXXXXXXXXX)"
    cat > "${xml}" <<SIGNING
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.debugger</key>
    <true/>
</dict>
</plist>
</pre>
SIGNING
    codesign --entitlements "${xml}" -fs gdb-cert "$(type -P dlv)"
    rm "${xml}"
  fi
fi

if type rustup >& /dev/null; then
  rustup update
  # TODO: I might need to sign binaries so I can debug.
fi
