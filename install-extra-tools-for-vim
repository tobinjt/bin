#!/bin/bash

set -e -f -u -o pipefail

if is_mac_os; then
  brew-update-brew-cleanup
fi

# If you run 'go get' from a directory containing go source code it will change
# go.{mod,sum} in that directory, so change to a temporary directory.
cd "${TMPDIR:-/tmp}"
if type go >& /dev/null; then
  # Clean up binaries so that GoInstallBinaries will install updated binaries.
  bindir="${GOPATH}/bin"
  if [[ -d "${bindir}" ]]; then
    printf "Clearing out binaries from %s\\n" "${bindir}"
    find "${bindir}" -type f -delete
  fi

  # keep-sorted start
  # Dead code detection.
  go install golang.org/x/tools/cmd/deadcode@latest
  # Auto-import packages.
  go install golang.org/x/tools/cmd/goimports@master
  # keep-sorted end

  # TODO: check if this is necessary with Homebrew dlv.
  if type codesign >& /dev/null; then
    # Debugger; manual instructions at
    # https://github.com/go-delve/delve/blob/master/Documentation/installation/README.md
    # Enable developer mode to avoid repeated password prompts.
    printf "Enabling developer mode; sudo might ask for a password\n"
    sudo /usr/sbin/DevToolsSecurity -enable

    # Needs to be signed to avoid repeated password prompts.
    # Docs for signing are https://sourceware.org/gdb/wiki/PermissionsDarwin
    readonly signing_cert="gdb-cert"
    if ! security find-certificate -Z -p -c "${signing_cert}" \
        /Library/Keychains/System.keychain > /dev/null 2>&1; then
      # Cert is missing, most likely this is a newly setup machine, create it.
      cert_config="$(mktemp /tmp/code-signing.cert_config.XXXXXXXXXX)"
      readonly cert_config
      cat > "${cert_config}" <<CERT_CONFIG
[ req ]
default_bits       = 2048        # RSA key size
encrypt_key        = no          # Protect private key
default_md         = sha512      # MD to use
prompt             = no          # Prompt for DN
distinguished_name = codesign_dn # DN template
[ codesign_dn ]
commonName         = "${signing_cert}"
[ codesign_reqext ]
keyUsage           = critical,digitalSignature
extendedKeyUsage   = critical,codeSigning
CERT_CONFIG

      new_cert="$(mktemp /tmp/code-signing.new_cert.XXXXXXXXXX)"
      new_key="$(mktemp /tmp/code-signing.new_key.XXXXXXXXXX)"
      readonly new_cert new_key
      openssl req -new -newkey rsa:2048 -x509 -days 3650 -nodes \
        -config "${cert_config}" -extensions codesign_reqext -batch \
        -out "${new_cert}" -keyout "${new_key}"

      printf "Configuring code signing cert, sudo may ask for a password\n"
      old_rights="$(mktemp /tmp/code-signing.old_rights.XXXXXXXXXX)"
      readonly old_rights
      # shellcheck disable=SC2024
      sudo security authorizationdb read com.apple.trust-settings.admin \
        > "${old_rights}"
      sudo security authorizationdb write com.apple.trust-settings.admin allow
      sudo security add-trusted-cert -d -r trustRoot -p codeSign \
        -k /Library/Keychains/System.keychain "${new_cert}"
      # shellcheck disable=SC2024
      sudo security authorizationdb write com.apple.trust-settings.admin \
        < "${old_rights}"
      sudo security import "${new_key}" -A -k /Library/Keychains/System.keychain
    fi

    xml="$(mktemp /tmp/code-signing.xml.XXXXXXXXXX)"
    readonly xml
    cat > "${xml}" <<SIGNING
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.debugger</key>
    <true/>
</dict>
</plist>
</pre>
SIGNING

    # Can't run this over SSH :(
    if [[ -z "${SSH_CONNECTION:-}" ]]; then
      codesign --entitlements "${xml}" -fs "${signing_cert}" "$(type -P dlv)"
    fi
  fi
fi

if type rustup >& /dev/null; then
  rustup-init --no-modify-path -y
  # Add ~/.cargo/bin to $PATH.
  source "${HOME}/.shellrc"
  rustup install stable
  rustup update
  rustup component add clippy rust-analyzer rust-src
  rustup update
  # https://github.com/taiki-e/cargo-llvm-cov?tab=readme-ov-file#from-source
  cargo +stable install cargo-llvm-cov --locked
  # https://crates.io/crates/cargo-watch
  cargo install cargo-watch
  # TODO: I might need to sign binaries so I can debug.
fi
